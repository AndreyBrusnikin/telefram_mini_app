import { defineStore } from 'pinia'
import type { UserProfile, UserState, TelegramWebAppUser } from '~/types/telegram'

export const useUserStore = defineStore('user', () => {
  // State
  const profile = ref<UserProfile | null>(null)
  const isAuthenticated = ref(false)
  const isLoading = ref(false)
  const error = ref<string | null>(null)

  // Getters
  const displayName = computed(() => {
    if (!profile.value) return ''
    return profile.value.displayName || `${profile.value.firstName} ${profile.value.lastName || ''}`.trim()
  })

  const avatar = computed(() => {
    return profile.value?.photoUrl || 'https://via.placeholder.com/120x120/2481cc/ffffff?text=üë§'
  })

  // Actions
  const setLoading = (loading: boolean) => {
    isLoading.value = loading
  }

  const setError = (errorMessage: string | null) => {
    error.value = errorMessage
  }

  const clearError = () => {
    error.value = null
  }

  const authenticateWithTelegram = async (): Promise<boolean> => {
    try {
      setLoading(true)
      clearError()

      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...')
      console.log('üì± window.Telegram:', window.Telegram)
      console.log('üåê process.client:', process.client)

      // –ï—Å–ª–∏ Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å mock —Ä–µ–∂–∏–º
      if (!window.Telegram?.WebApp) {
        console.log('‚ùå Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º mock —Ä–µ–∂–∏–º...')
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º composable –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ mock —Ä–µ–∂–∏–º–∞
        const { enableMockMode } = useTelegramMock()
        const mockActivated = enableMockMode()
        
        if (mockActivated) {
          console.log('‚úÖ Mock —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –∂–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...')
          // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é mock –¥–∞–Ω–Ω—ã—Ö
          await new Promise(resolve => setTimeout(resolve, 100))
        } else {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.')
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Telegram WebApp (–≤–∫–ª—é—á–∞—è mock)
      if (!window.Telegram?.WebApp) {
        console.log('‚ùå Telegram WebApp –≤—Å–µ –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ mock —Ä–µ–∂–∏–º–∞')
        throw new Error('Telegram WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.')
      }

      const webApp = window.Telegram.WebApp
      console.log('‚úÖ Telegram WebApp –Ω–∞–π–¥–µ–Ω:', webApp)
      console.log('üìä initDataUnsafe:', webApp.initDataUnsafe)
      
      webApp.ready()

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
      const telegramUser = webApp.initDataUnsafe?.user

      console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramUser)

      if (!telegramUser) {
        console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ initDataUnsafe')
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–í–∫–ª—é—á–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º".')
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ Telegram –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
      const userProfile: UserProfile = {
        id: telegramUser.id,
        firstName: telegramUser.first_name,
        lastName: telegramUser.last_name,
        username: telegramUser.username,
        photoUrl: telegramUser.photo_url,
        displayName: `${telegramUser.first_name} ${telegramUser.last_name || ''}`.trim()
      }

      profile.value = userProfile
      isAuthenticated.value = true

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Telegram WebApp
      webApp.expand()
      webApp.setHeaderColor('#2481cc')

      console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞:', userProfile)
      return true
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err)
      setError(errorMessage)
      return false
    } finally {
      setLoading(false)
    }
  }

  const updateUserName = async (newFirstName: string, newLastName?: string): Promise<boolean> => {
    try {
      setLoading(true)
      clearError()

      if (!profile.value) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
      }

      if (!newFirstName.trim()) {
        throw new Error('–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
      const updatedProfile: UserProfile = {
        ...profile.value,
        firstName: newFirstName.trim(),
        lastName: newLastName?.trim() || '',
        displayName: `${newFirstName.trim()} ${newLastName?.trim() || ''}`.trim()
      }

      profile.value = updatedProfile

      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      // await $fetch('/api/user/update', { 
      //   method: 'POST', 
      //   body: updatedProfile 
      // })

      return true
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏'
      setError(errorMessage)
      return false
    } finally {
      setLoading(false)
    }
  }

  const logout = () => {
    profile.value = null
    isAuthenticated.value = false
    clearError()
  }

  return {
    // State
    profile: readonly(profile),
    isAuthenticated: readonly(isAuthenticated),
    isLoading: readonly(isLoading),
    error: readonly(error),
    
    // Getters
    displayName,
    avatar,
    
    // Actions
    authenticateWithTelegram,
    updateUserName,
    logout,
    clearError
  }
}) 